class Solution {
public:
    vector<bool> checkArithmeticSubarrays(vector<int>& nums, vector<int>& l, vector<int>& r) {
        ios::sync_with_stdio(false);
        cin.tie(0);
        cout.tie(0);
        vector<bool> ans;
        for(int i = 0; i< l.size(); i++){
            vector<int> temp;
            for(int j = l[i]; j<=r[i]; j++){
                temp.push_back(nums[j]);
            }
            sort(temp.begin(), temp.end());
            int chk = 0;
            int diff = temp[0]-temp[1];
            for(int k = 2; k<temp.size(); k++){
                int tdiff = temp[k-1]-temp[k];
                if(diff != tdiff){
                    chk++;
                }
            }
            if(chk == 0){
                ans.push_back(true);
            }else{
                ans.push_back(false);
            }
        }
        return ans;
    }
};

Efficient writing same logic :

class Solution {
public:
    bool check(vector<int> &arr) {
        sort(begin(arr), end(arr));
        int n = arr.size();
        
        int d = arr[1] - arr[0];
        
        for(int i = 2; i<n; i++) {
            if(arr[i] - arr[i-1] != d) {
                return false;
            }
        }
        return true;
    }
    
    vector<bool> checkArithmeticSubarrays(vector<int>& nums, vector<int>& l, vector<int>& r) {
        int m = l.size();
        
        vector<bool> result;
        
        for(int i = 0; i<m; i++) {
            
            vector<int> arr(begin(nums) + l[i], begin(nums) + r[i] + 1);
            
            result.push_back(check(arr));
            
        }
        
        return result;
    }
};
